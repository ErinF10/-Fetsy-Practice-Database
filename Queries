Queries:
Create a stored procedure called top_ten_for_country which accepts the name of a country and returns the buyer_id, first_name,
last_name, and total_amount_spent for the top ten buyers (in terms of total amount of money spent) for that country. 
Make sure to do an unnecessary join to another table
-- We can do an INNER JOIN on the tables because there will never be NULL values except in the case of a product without an order,
-- we are never going to look at products without orders though.

DROP PROCEDURE top_ten_for_country;
DELIMITER :
CREATE PROCEDURE top_ten_for_country(IN countryTest VARCHAR(255)) -- , OUT buyer_id INT, OUT first_name VARCHAR(255), OUT last_name VARCHAR(255), OUT total_amount_spent INT)
BEGIN
	DECLARE counter INT DEFAULT 0;
	DECLARE buyerID VARCHAR(255);
	DECLARE firstName VARCHAR(255);
	DECLARE lastName VARCHAR(255);
    DECLARE cursorCountry VARCHAR(255);
    DECLARE totalAmountSpent VARCHAR(255);
    
	DECLARE buyerCursor CURSOR FOR SELECT buyer_id, first_name, last_name, total_amount_spent, country
		FROM (
			SELECT SUM(order_cost) as total_amount_spent, buyer_id, country, first_name, last_name
			FROM (
				SELECT order_cost, order_id, buyer_id, country, first_name, last_name 
				FROM (
					SELECT (orders.order_quantity * products.product_price) AS order_cost, orders.order_id AS order_id, orders.buyer_id AS buyer_id, buyers.country AS country,
						buyers.first_name as first_name, buyers.last_name as last_name
					FROM orders
					INNER JOIN buyers ON buyers.buyer_id = orders.buyer_id
					INNER JOIN products ON orders.product_id = products.product_id
				) AS order_costs
			) AS order_sums
			GROUP BY buyer_id
		) AS temp_table;
        
	CREATE TABLE top_ten_for_country (
		buyer_id VARCHAR(255), 
		first_name VARCHAR(255), 
        last_name VARCHAR(255),
        total_amount_spent VARCHAR(255)
	);
    
	OPEN buyerCursor;
	FETCH FROM buyerCursor INTO buyerID, firstName, lastName, totalAmountSpent, cursorCountry;

	WHILE counter < 10 DO
		IF cursorCountry = countryTest THEN
			INSERT INTO top_ten_for_country VALUES (buyerID, firstName, lastName, totalAmountSpent);
			SET counter = counter + 1;
		END IF;
		FETCH FROM buyerCursor INTO buyerID, firstName, lastName, totalAmountSpent, cursorCountry;
	END WHILE;
	CLOSE buyerCursor;    
    SELECT @buyer_id, @first_name, @last_name, @total_amount_spent;
END:

DROP TABLE top_ten_for_country;
CALL top_ten_for_country('Hong Kong'); -- , @buyer_id, @first_name, @last_name, @total_amount_spent);
SELECT * FROM top_ten_for_country;

Create a view called top_rated_products which displays the product_id, product_name, product_price, avg_rating and rating_count for 
the top ten products according to their average rating (minimum of 20 ratings).



Create a stored procedure called buyer_for_date which accepts a first name, last name, and order date and returns the order_id, 
order_quantity, product_name and order_date for orders made by buyers with that name on that date.



Create a view called top_five_buyer_cities which displays the city and total_amount_spent for the top five cities in terms buyer 
spending, descending order. Display the sum of spending (per city).



Create a stored procedure called sales_for_month which accepts a specific month (i.e. month and year) and returns the month_and_year 
(in one column) and sum of all sales in that month (under the column total_sales).



Create a view called seller_sales_tiers which displays the seller_id, seller_name, total_sales sum. Also display the sales_tier based on 
the total sales for a seller. Apply the corresponding label:
$100,000.00 <= High
$10,000.00 <= Medium < $100,000.00
$10,000.00 > Low



Create a stored procedure called top_products_for_seller which accepts a seller name and returns the seller_id, product_id, product_name, 
and total_sales for all the products sold by that seller, sorted by most total sales (in terms of money) in descending order.



Create a stored procedure called seller_running_totals which accepts a seller name and returns the seller_id, order_id, order_date, 
order_total. Also show a running sales total (in terms of money) for that seller over all time (hint: windowing functions) under 
the column running_total. The running total should increase with each sale made.



